"""Subclass of Dictionary, which is generated by wxFormBuilder."""

import wx
import TheDictionary

# Implementing Dictionary
class TheDictionaryDictionary( TheDictionary.Dictionary ):
	def __init__( self, parent ):
		TheDictionary.Dictionary.__init__( self, parent )
		self.enable_disable_buttons(False)
		self.history = []
		self.current_word = 0
		from wiktionaryparser import WiktionaryParser
		self.parser = WiktionaryParser()

	# Handlers for Dictionary events.
	def OnTextTyped( self, event ):
		# TODO: Implement OnTextTyped
		pass

	def OnTextEnter( self, event ):
		self.search()

	def OnPrevious( self, event ):
		# TODO: Implement OnPrevious
		pass

	def OnNext( self, event ):
		# TODO: Implement OnNext
		pass

	def OnPronounce( self, event ):
		# TODO: Implement OnPronounce
		pass

	def OnBookmark( self, event ):
		# TODO: Implement OnBookmark
		pass

	def OnPreferences( self, event ):
		# TODO: Implement OnPreferences
		pass

	def OnExit( self, event ):
		# TODO: Implement OnExit
		pass

	def OnHelp( self, event ):
		# TODO: Implement OnHelp
		pass

	def OnAbout( self, event ):
		# TODO: Implement OnAbout
		pass


	def enable_disable_buttons(self, enable):
		self.m_bpButtonPrevious.Enable(enable)
		self.m_bpButtonNext.Enable(enable)
		self.m_bpButtonPronounce.Enable(enable)
		self.m_bpButtonBookmark.Enable(enable)

	def update_gui(self, the_word):
		self.m_richTextDefinition.SetValue('')
		
		if len(the_word) > 1:
			self.m_richTextDefinition.BeginBold()
			self.m_richTextDefinition.WriteText(the_word[len(the_word) - 1])
			self.m_richTextDefinition.EndBold()
			self.m_richTextDefinition.Newline()
			for i in range(0, len(the_word) - 1):

				self.m_richTextDefinition.BeginItalic()
				self.m_richTextDefinition.WriteText('Definition ' + str(i+1))
				self.m_richTextDefinition.EndItalic()
				self.m_richTextDefinition.Newline()

				the_dict = the_word[i]
				if 'etymology' in the_dict:
					self.m_richTextDefinition.BeginBold()
					self.m_richTextDefinition.WriteText('Etymology: ')
					self.m_richTextDefinition.EndBold()
					self.m_richTextDefinition.WriteText(the_dict['etymology'])
					self.m_richTextDefinition.Newline()

				if 'pronunciations' in the_dict:
					self.m_richTextDefinition.BeginBold()
					self.m_richTextDefinition.WriteText('Pronunciations: ')
					self.m_richTextDefinition.EndBold()
					pronun = the_dict['pronunciations']
					if 'text' in pronun:
						for text in pronun['text']:
							self.m_richTextDefinition.WriteText(text + ' ')
					self.m_richTextDefinition.Newline()
						
				if 'definitions' in the_dict:
					self.m_richTextDefinition.BeginBold()
					self.m_richTextDefinition.WriteText('Definitions')
					self.m_richTextDefinition.EndBold()
					self.m_richTextDefinition.Newline()
					for definition in the_dict['definitions']:
						part_of_speech = definition['partOfSpeech'] if 'partOfSpeech' in definition else None
						self.m_richTextDefinition.WriteText(part_of_speech)
						self.m_richTextDefinition.Newline()

						texts = definition['text'] if 'text' in definition else []

						i = 0
						for t in texts:
							self.m_richTextDefinition.WriteText(str(i+1) + ". " + t)
							self.m_richTextDefinition.Newline()
							i += 1

						examples = definition['examples'] if 'examples' in definition else []

						if len(examples) > 0:
							self.m_richTextDefinition.BeginBold()
							self.m_richTextDefinition.WriteText('Examples')
							self.m_richTextDefinition.Newline()
							self.m_richTextDefinition.EndBold()


							for ex in examples:
								self.m_richTextDefinition.BeginItalic()
								self.m_richTextDefinition.WriteText(ex)
								self.m_richTextDefinition.Newline()
								self.m_richTextDefinition.EndItalic()

						if 'relatedWords' in definition and len(definition['relatedWords']):

							self.m_richTextDefinition.BeginBold()
							self.m_richTextDefinition.WriteText('Related words')
							self.m_richTextDefinition.Newline()
							self.m_richTextDefinition.EndBold()

							for rw in definition['relatedWords']:
								rtype = None
								words = []
								if 'relationshipType' in rw:
									rtype = rw['relationshipType']
								if "words" in rw:
									words = rw['words']
								self.m_richTextDefinition.BeginItalic()
								self.m_richTextDefinition.WriteText(rtype + ": ")
								self.m_richTextDefinition.EndItalic()
								for w in words:
									self.m_richTextDefinition.WriteText(w)
									self.m_richTextDefinition.Newline()


				
		else:
			self.m_richTextDefinition.WriteText('We could not find a definition for that.')
			self.m_richTextDefinition.Newline()

		
	def search(self):
		the_word = self.m_textCtrlWord.GetValue().strip()
		if the_word == '':
			wx.Bell()
			pass # nothing to search
		else:
			wx.BeginBusyCursor()
			try:
				the_word = the_word.lower()
				word = self.parser.fetch(the_word)
				word.append(the_word)
				wx.EndBusyCursor()
				self.update_gui(word)
				self.history.append(word)
				self.current_word = 0 if len(self.history) == 1 else self.current_word + 1
			except:
				from traceback import print_exc
				print_exc()
				if wx.IsBusy():
					wx.EndBusyCursor()
				wx.MessageBox("An error occurred while searching for the word.\nPlease try again later.",
					"Error Searching", style=wx.OK|wx.ICON_WARNING, parent=self)
			if wx.IsBusy():
				wx.EndBusyCursor()


